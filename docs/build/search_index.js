var documenterSearchIndex = {"docs":
[{"location":"models/#ParticleField","page":"Particle Field","title":"ParticleField","text":"","category":"section"},{"location":"models/","page":"Particle Field","title":"Particle Field","text":"FLOWVPM is centered around the ParticleField struct that contains all of the particle information and model settings.","category":"page"},{"location":"models/","page":"Particle Field","title":"Particle Field","text":"ParticleField(maxparticles)","category":"page"},{"location":"models/","page":"Particle Field","title":"Particle Field","text":"maxparticles is the maximum number of particles that can exist in the simulation. The memory for these particles is allocated at the time the ParticleField is created, so any attempt to add more than maxparticles particles will result in errors","category":"page"},{"location":"models/#Keyword-Arguments","page":"Particle Field","title":"Keyword Arguments","text":"","category":"section"},{"location":"models/","page":"Particle Field","title":"Particle Field","text":"formulation: VPM formulation. See Model Options for more details","category":"page"},{"location":"models/","page":"Particle Field","title":"Particle Field","text":"viscous: Viscous scheme. With classic VPM viscous schemes help improve numerical stability, with the reformulated VPM they are not necessary unless significant viscosity actually exists.","category":"page"},{"location":"models/","page":"Particle Field","title":"Particle Field","text":"np: The number of particles in the field, defaults to 0 and is modifed by the add_particle and remove_particle functions.","category":"page"},{"location":"models/","page":"Particle Field","title":"Particle Field","text":"nt: The current time step number. Defaults to 0.","category":"page"},{"location":"models/","page":"Particle Field","title":"Particle Field","text":"t: Current time. Defaults to 0.0.","category":"page"},{"location":"models/","page":"Particle Field","title":"Particle Field","text":"transposed: Determines how the vortex stretching is stored. Defaults to true. (There is no need for the user to modify this value.)","category":"page"},{"location":"models/","page":"Particle Field","title":"Particle Field","text":"fmm: FMM settings. Defaults to FMM(; p=4, ncrit=50, theta=0.4, nonzero_sigma=true, ε_tol=nothing). p is the maximum order of the multipole expansion, higher values result in higher accuracy. ncrit is the maximum leaf size. theta is the neighborhood criterion. nonzero_sigma should always be true as vortex particles have a nonzero radius. ε_tol (varepsilon) is the maximum error allowed in the FMM calculations, by setting this value the multipole expansion is optimzed to use the least number of terms to achieve the desired error tolerance. See Fastmultipole.jl for more details.","category":"page"},{"location":"models/","page":"Particle Field","title":"Particle Field","text":"M: Auxiliary storage for particle computations, users should never modify the default.","category":"page"},{"location":"models/","page":"Particle Field","title":"Particle Field","text":"toggle_rbf: Switch to determine if the vorticity field should be calculated. This value changes frequently during time steps and should never be modified by users.","category":"page"},{"location":"models/","page":"Particle Field","title":"Particle Field","text":"toggle_sfs: Switch to determine if the stretching term should be calculated. This value changes frequently during time steps and should never be modified by users.","category":"page"},{"location":"models/","page":"Particle Field","title":"Particle Field","text":"SFS: The subfilter-scale scheme used. See Model Options for details.","category":"page"},{"location":"models/","page":"Particle Field","title":"Particle Field","text":"kernel: The vortex particle kernel. See Model Options for details.","category":"page"},{"location":"models/","page":"Particle Field","title":"Particle Field","text":"UJ: If set to UJfmm (default) uses the FMM to solve the particle interactions. If set to UJdirect uses only direct calculations so solve for particle interactions. Unless debugging or checking for error produced by the FMM settings there is no need to use UJ_direct.","category":"page"},{"location":"models/","page":"Particle Field","title":"Particle Field","text":"Uinf: Freestream velocity, takes the form f(t) where t is the current time.","category":"page"},{"location":"models/","page":"Particle Field","title":"Particle Field","text":"relaxation: The divergence relaxation scheme, see Model Options for more details.","category":"page"},{"location":"models/","page":"Particle Field","title":"Particle Field","text":"integration: Time integration scheme. Defaults to an RK3 method.","category":"page"},{"location":"models/","page":"Particle Field","title":"Particle Field","text":"useGPU: Defaults to 0, still experimental. Does to accelerate SFS calculations.","category":"page"},{"location":"models/#Accessing-Particle-Information","page":"Particle Field","title":"Accessing Particle Information","text":"","category":"section"},{"location":"models/","page":"Particle Field","title":"Particle Field","text":"FLOWVPM provides get and set functions for particles. Get functions take the form get_property(P) where P is a particle, or get_property(pfield::ParticleField, i::Int) where i is the particle index. Get functions return views. Set functions take the from set_property(P, val) and set_property(pfield, i, val) where val is the new value to be set and is applied via broadcasting. Get and set functions are used by replacing \"property\" with the desired particle property such as get_X(P). The following are the particle properties: ","category":"page"},{"location":"models/","page":"Particle Field","title":"Particle Field","text":"X: position\nGamma: circulation\nsigma: radius\nvol: volume\ncirculation: norm of Gamma\nU: velocity\nvorticity: vorticity \nJ: velocity gradient\nM: auxiliary computational space\nC: coefficient in the SFS model\nstatic: whether a particle is static or not (previously used when replacing wing/blade elements with particles for FMM calculations. Is no longer necessary if bodies can be represented with FastMultipole.jl)\nPSE: Storage needed for ParticleStrengthExchange\nSFS: Storage of SFS values","category":"page"},{"location":"models/#Adding-Particles-to-the-ParticleField","page":"Particle Field","title":"Adding Particles to the ParticleField","text":"","category":"section"},{"location":"models/","page":"Particle Field","title":"Particle Field","text":"Calling add_particle(pfield::ParticleField, X, Gamma, sigma) will add a particle to the particle field with position X, circulation Gamma, and radius sigma. The function will error if pfield.maxparticles is exceeded. Another option is to call add_particle(pfield, P) where P is a particle.","category":"page"},{"location":"models/#Removing-Particles-from-the-ParticleField","page":"Particle Field","title":"Removing Particles from the ParticleField","text":"","category":"section"},{"location":"models/","page":"Particle Field","title":"Particle Field","text":"Calling remove_particle(pfield::ParticleField, i:Int) will remove particle i from pfield.","category":"page"},{"location":"models/#Propogating-Particles","page":"Particle Field","title":"Propogating Particles","text":"","category":"section"},{"location":"models/","page":"Particle Field","title":"Particle Field","text":"Calling nextstep(pfield::ParticleField, dt::Real; relax=false, custom_UJ=nothing) will propogate the particles in pfield forward dt in time. relax can be used to set relaxation to only occur under certain conditions. custom_UJ can be set if the user wishes to calculate the particle interaction in their own way.","category":"page"},{"location":"models/#Model-Options","page":"Particle Field","title":"Model Options","text":"","category":"section"},{"location":"models/","page":"Particle Field","title":"Particle Field","text":"For details on models please see:","category":"page"},{"location":"models/","page":"Particle Field","title":"Particle Field","text":"Alvarez, Eduardo J., \"Reformulated Vortex Particle Method and Meshless Large Eddy Simulation of Multirotor Aircraft\" (2022). Theses and Dissertations. 9589. https://scholarsarchive.byu.edu/etd/9589","category":"page"},{"location":"models/#VPM-Fomulation","page":"Particle Field","title":"VPM Fomulation","text":"","category":"section"},{"location":"models/","page":"Particle Field","title":"Particle Field","text":"All VPM formulations use the same basic equations with varying coefficients f and g.","category":"page"},{"location":"models/","page":"Particle Field","title":"Particle Field","text":"rVPM refers to the reformulated VPM equations and is the default formulation (f=0, g=15)\ncVPM refers to the classic VPM equations (f=g=0)\nformulation_tube_continuity (f=12, g=0)\nformulation_tube_momentum (f=14, g=14)","category":"page"},{"location":"models/#Kernels","page":"Particle Field","title":"Kernels","text":"","category":"section"},{"location":"models/","page":"Particle Field","title":"Particle Field","text":"singular\ngaussian\ngaussianerf (default)\nwinckelmans","category":"page"},{"location":"models/#Relaxation-Schemes","page":"Particle Field","title":"Relaxation Schemes","text":"","category":"section"},{"location":"models/","page":"Particle Field","title":"Particle Field","text":"These relaxation schemes are designed to enforce the divergence free condition of VPM","category":"page"},{"location":"models/","page":"Particle Field","title":"Particle Field","text":"norelaxation\npedrizzetti (default)\ncorrectedpedrizzetti is a modification to the pedrizzetti relaxation that maintains vortex strength.","category":"page"},{"location":"models/#Subfilter-scale-(SFS)-Models","page":"Particle Field","title":"Subfilter-scale (SFS) Models","text":"","category":"section"},{"location":"models/","page":"Particle Field","title":"Particle Field","text":"The SFS model is designed to model turbulent diffusion","category":"page"},{"location":"models/","page":"Particle Field","title":"Particle Field","text":"noSFS (default)\nSFS_Cs_nobackscatter\nSFS_Cd_twolevel_nobackscatter (recommended for highest stability)\nSFS_Cd_threelevel_nobackscatter","category":"page"},{"location":"models/#Viscous-Schemes","page":"Particle Field","title":"Viscous Schemes","text":"","category":"section"},{"location":"models/","page":"Particle Field","title":"Particle Field","text":"As mentioned, with classic VPM viscous schemes are often used to ensure numerical stability by setting viscosity to non-physical levels. Unless working with a highly viscous fluid there is no need to use a viscous model.","category":"page"},{"location":"models/","page":"Particle Field","title":"Particle Field","text":"Inviscid (default)\nCoreSpreading(nu, sgm0) where nu is kinematic viscosity and sgm0 is the core size after reset. This method works by increasing particle size at each time step to account for the viscous effects of the fluid. To keep particles from becoming too large the particle sizes are reset if particle size exceeds a certain threshold that can be set with keyword arguments. \nOnly compatible with gaussianerf kernel\nParticleStrengthExchange(nu)","category":"page"},{"location":"models/#Time-Stepping-Schemes","page":"Particle Field","title":"Time Stepping Schemes","text":"","category":"section"},{"location":"models/","page":"Particle Field","title":"Particle Field","text":"euler\nrungekutta3 makes multiple substeps for each time step, improving accuracy. This often means that larger overall timesteps can be used without losing accuracy. (default)","category":"page"},{"location":"rVPM/#Reformulated-VPM","page":"Reformulation","title":"Reformulated VPM","text":"","category":"section"},{"location":"rVPM/","page":"Reformulation","title":"Reformulation","text":"The following is an excerpt from  E. J. Alvarez & A. Ning (2022), \"Meshless Large Eddy Simulation of Rotor-Wing Interactions Through the Reformulated Vortex Particle Method,\" (in review).","category":"page"},{"location":"rVPM/#Vorticity-Navier-Stokes","page":"Reformulation","title":"Vorticity Navier-Stokes","text":"","category":"section"},{"location":"rVPM/","page":"Reformulation","title":"Reformulation","text":"In recent work[1][2], a new formulation of the vortex particle method (VPM) has been derived from the LES-filtered Navier-Stokes equations. The new method, referred to as the reformulated VPM or rVPM, is an LES that is both numerically stable and meshless, and is able to accurately resolve mean and fluctuating large-scale features of turbulent flow with minimal computational effort. Hereby we concisely summarize the governing equations of the reformulated VPM, and the reader is referred to Ref.[1] and the doctoral dissertation[2] accompanying this work for a detailed derivation of the method.","category":"page"},{"location":"rVPM/","page":"Reformulation","title":"Reformulation","text":"The reformulated VPM uses a Lagrangian scheme to solve the vorticity form of the LES-filtered Navier-Stokes equations","category":"page"},{"location":"rVPM/","page":"Reformulation","title":"Reformulation","text":"beginalign\n        fracpartial overline omega_i partial t\n        + overline u_j  fracpartial overline omega_i partial x_j\n     =\n        overline omega_j  fracpartial overline u_i partial x_j\n    +\n        nu nabla^2 overline omega_i  -\n        fracpartial T_ijpartial x_j +\n        fracpartial T_ijpartial x_j\nendalign","category":"page"},{"location":"rVPM/","page":"Reformulation","title":"Reformulation","text":"where the bar denotes the filter operator,[a] and T_ij equiv overline u_i omega_j  - overline u_i   overline omega_j  is the subfilter-scale (SFS) vorticity stress capturing the interactions between large-scale dynamics and SFS dynamics. The term fracpartial T_ijpartial x_j represents the SFS contributions arising from the advective term (vorticity advection), while fracpartial T_ijpartial x_j represents the contributions arising from vortex stretching. For simplicity, Eq. (1) is written in vector notation as","category":"page"},{"location":"rVPM/","page":"Reformulation","title":"Reformulation","text":"beginalign\n    fractextd textd t overline boldsymbolomega \n    = left( overline boldsymbolomega  cdot nabla right) overline mathbfu  +\n    nu nabla^2 overline boldsymbolomega \n    - mathbfE_mathrmadv - mathbfE_mathrmstr\nendalign","category":"page"},{"location":"rVPM/","page":"Reformulation","title":"Reformulation","text":"where left( mathbfE_mathrmadv right)_i equiv fracpartial T_ijpartial x_j is the SFS vorticity advection, left( mathbfE_mathrmstr right)_i equiv - fracpartial T_ijpartial x_j is the SFS vortex stretching, and the fractextd textd t operator is the linearized version of the filtered material derivative, fractextd textd t () equiv fracpartial partial t() + (overline bf u  cdot nabla)(). Notice that casting the Navier-Stokes equation into this vorticity form gets rid of all dependance on pressure. Furthermore, this equation depends on boldsymbolomega alone since bfu can be calculated directly from boldsymbolomega = nabla times bfu through the Biot-Savart law.","category":"page"},{"location":"rVPM/#particlediscretization","page":"Reformulation","title":"Particle Discretization","text":"","category":"section"},{"location":"rVPM/","page":"Reformulation","title":"Reformulation","text":"The material derivative in Eq. (2) and the material-conservative nature of the vorticity makes the boldsymbolomega field especially well fit for a Lagrangian description. The unfiltered boldsymbolomega field is discretized with singular vortex particles of positions bf x_p and coefficients boldsymbolGamma_p (called vortex strength), approximating boldsymbolomega as","category":"page"},{"location":"rVPM/","page":"Reformulation","title":"Reformulation","text":"beginalign  labeleqparticledirac\n    boldsymbolomega(bf xt) approx sum\n        limits_p boldsymbolGamma_p (t)\n            delta  (bf x - bf x_p(t))\nendalign","category":"page"},{"location":"rVPM/","page":"Reformulation","title":"Reformulation","text":"where delta is the Dirac delta. Applying the filter operator,","category":"page"},{"location":"rVPM/","page":"Reformulation","title":"Reformulation","text":"beginalign*\n        overline boldsymbolomega  left( mathbfx right)\n     =\n        intlimits_-infty^infty\n            boldsymbolomegaleft( mathbfy right)\n            zeta_sigma(mathbfx-mathbfy)\n        mathrmdmathbfy\n      \n    approx\n        intlimits_-infty^infty\n            left(\n                sumlimits_p\n                    boldsymbolGamma_p\n                    delta (textbf y - textbf x_p)\n            right)\n            zeta_sigma(mathbfx-mathbfy)\n        mathrmdmathbfy\nendalign*","category":"page"},{"location":"rVPM/","page":"Reformulation","title":"Reformulation","text":"the Dirac delta collapses the integral, obtaining an approximation of the filtered vorticity field as","category":"page"},{"location":"rVPM/","page":"Reformulation","title":"Reformulation","text":"beginalign  labeleqparticleblob\n        overlineboldsymbolomegaleft( mathbfxt right)\n     approx\n        sumlimits_p\n            boldsymbolGamma_p (t)\n            zeta_sigma_p(mathbfx-mathbfx_p(t))\nendalign","category":"page"},{"location":"rVPM/","page":"Reformulation","title":"Reformulation","text":"where zeta_sigma(mathbfx) equiv frac1sigma^3 zeta left(fracVert mathbfx Vertsigma right) is the filter kernel of width sigma and radial basis zeta. As seen in Eq. (4), the filter operator has the effect of spreading the vortex strength boldsymbolGamma_p in space, regularizing the singularity originally introduced by the Dirac delta. Thus, the filter kernel takes the role of a basis function that is used to discretize overlineboldsymbolomega through particles. We let the filter width sigma (here on called smoothing radius or core size) change in time and space according to the evolution of each individual particle. The particle field constructs a continuous vorticity field through radial basis functions as given by Eq. (4), and also a continuous velocity field by inverting the relation overlineboldsymbolomega = nabla times overlinemathbfu as","category":"page"},{"location":"rVPM/","page":"Reformulation","title":"Reformulation","text":"beginalign  labeleqUreg\n        overline mathbfu left( mathbfx right)\n    =\n        - frac14pisumlimits_p g_sigma_pleft( mathbfx-mathbfx_p right)\n            fracmathbfx-mathbfx_pVertmathbfx-mathbfx_pVert^3\n            times\n            boldsymbolGamma_p\nendalign","category":"page"},{"location":"rVPM/","page":"Reformulation","title":"Reformulation","text":"where g_sigma is the regularizing function[3] associated with the filter kernel zeta_sigma. Hence, all fluid properties—like overlinemathbfu and its spatial derivatives—are continuous and can be computed analytically.","category":"page"},{"location":"rVPM/#Governing-Equations","page":"Reformulation","title":"Governing Equations","text":"","category":"section"},{"location":"rVPM/","page":"Reformulation","title":"Reformulation","text":"Similar to the process that led from Eq. (3) to Eq. (4), we use singular particles to discretize the LES-filtered vorticity equation given in Eq. (2), and arrive to the governing equations of the reformulated VPM:","category":"page"},{"location":"rVPM/","page":"Reformulation","title":"Reformulation","text":"beginalign\n     labeleqrvpmgedxdt\n     bullet quad\n    \n        fractextdtextdtbf x_p\n        =\n        overlinemathbfu(bf x_p)\nendalign","category":"page"},{"location":"rVPM/","page":"Reformulation","title":"Reformulation","text":"beginalign\n       labeleqrvpmgedGammadt\n    beginsplit\n         bullet quad\n         fracmathrmd mathrmd t boldsymbolGamma_p\n        =\n            left(\n                boldsymbolGamma_p cdot nabla\n            right)\n            overlinemathbfu (bf x_p)\n            -\n            fracg + ffrac13 + f\n            left\n                left\n                    left(\n                            boldsymbolGamma_p  cdot nabla\n                        right)\n                        overlinemathbfu small (bf x_p)\n                right\n                cdot hatboldsymbolGamma_p\n            right hatboldsymbolGamma_p\n        \n         qquad qquad \n        qquad qquad quad \n            - fracC_dzeta_sigma_p (bf 0)\n            left\n                mathbfE_mathrmstr (bf x_p)\n                -\n                fracffrac13 + f\n                left(\n                    mathbfE_mathrmstr (bf x_p) cdot hatboldsymbolGamma_p\n                right) hatboldsymbolGamma_p\n            right\n    endsplit\nendalign","category":"page"},{"location":"rVPM/","page":"Reformulation","title":"Reformulation","text":"beginalign\n       labeleqrvpmgedsigmadt\n     bullet quad\n    \n        fracmathrmd mathrmd t sigma_p\n        =\n        - left(\n            fracg + f1 + 3f\n        right)\n        fracsigma_pVert boldsymbolGamma_p Vert\n            left\n                left(\n                        boldsymbolGamma_p  cdot nabla\n                    right)\n                    overlinemathbfu small (bf x_p)\n            right\n            cdot hatboldsymbolGamma_p\n        +\n        left(\n            fracf1 + 3f\n        right)\n        fracsigma_pVert boldsymbolGamma_p Vert\n        fracC_dzeta_sigma_p (bf 0)\n        mathbfE_mathrmstr (bf x_p) cdot hatboldsymbolGamma_p\nendalign","category":"page"},{"location":"rVPM/","page":"Reformulation","title":"Reformulation","text":"beginalign\n       labeleqrvpmgeviscous\n     bullet quad\n    \n        left(\n            fractextd textd t overline boldsymbolomega \n        right)_mathrmviscous\n        =\n        nu nabla^2 overline boldsymbolomega \nendalign","category":"page"},{"location":"rVPM/","page":"Reformulation","title":"Reformulation","text":"where Eq. (6) resolves vorticity advection by convecting the particles, Eq. (7) governs the evolution of vortex strength, and Eq. (8) governs the evolution of particle size. Eq. (7) in conjunction with Eqs. (6) and (8) resolve the inviscid part of the LES-filtered vorticity Navier-Stokes equation, while the viscous part in Eq. (9) can be resolved through any of the schemes previously proposed in the literature (e.g., vortex redistribution method, particle strength exchange, or core spreading).","category":"page"},{"location":"rVPM/","page":"Reformulation","title":"Reformulation","text":"The main headway of the reformulated VPM over the classic VPM is that rVPM uses the particle size, or fracmathrmd mathrmd t sigma_p, as an extra degree of freedom to reinforce conservation laws. As shown in References [1] and [2], momentum and mass conservation leads to f = 0 and g = frac15, and Eqs. (7) and (8) become","category":"page"},{"location":"rVPM/","page":"Reformulation","title":"Reformulation","text":"beginalign*\n     bullet quad\n     fracmathrmd mathrmd t boldsymbolGamma_p\n    =\n        left(\n            boldsymbolGamma_p cdot nabla\n        right)\n        overline mathbfu  (mathbfx_p)\n        -\n        frac35\n        left\n            left\n                left(\n                        boldsymbolGamma_p  cdot nabla\n                    right)\n                    overline mathbfu  small (mathbfx_p)\n            right\n            cdot hatboldsymbolGamma_p\n        right hatboldsymbolGamma_p\n        - fracC_dzeta_sigma_p (mathbf0)\n            mathbfE_mathrmstr (mathbfx_p)\n    \n     bullet quad\n    \n        fracmathrmd mathrmd t sigma_p\n        =\n        -\n        frac15\n        fracsigma_pVert boldsymbolGamma_p Vert\n            left\n                left(\n                        boldsymbolGamma_p  cdot nabla\n                    right)\n                    overline mathbfu  small (mathbfx_p)\n            right\n            cdot hatboldsymbolGamma_p\nendalign*","category":"page"},{"location":"rVPM/","page":"Reformulation","title":"Reformulation","text":"which is the formulation referred to as the \"reformulated VPM.\" Notice that when f = g = 0 and mathbfE_mathrmstr is neglected, Eqs. (7) and (8) collapse back to the classic VPM equations, making these equations a generalization of the classic method. In Reference [2] is shown that the classic VPM turns out to violate both conservation of momentum and mass when it assumes fracmathrmd mathrmd t sigma_p = 0, which explains the tendency of the classic VPM to be numerically unstable. Furthermore, notice that the rVPM equations do not require more computation than the classic VPM: when SFS effects are neglected (mathbfE_mathrmstr=0), both fracmathrmd sigma_p mathrmdt and fracmathrmd boldsymbolGamma_pmathrmd t are calculated directly and solely from vortex stretching, left( boldsymbolGamma_p cdot nabla  right) overlinemathbfu (bf x_p).","category":"page"},{"location":"rVPM/","page":"Reformulation","title":"Reformulation","text":"For an in-depth derivation of the rVPM governing equations, see Chapters 1 and 2 in Alvarez' Dissertation.[2]","category":"page"},{"location":"rVPM/#sfsmodel","page":"Reformulation","title":"Turbulence Model","text":"","category":"section"},{"location":"rVPM/","page":"Reformulation","title":"Reformulation","text":"Turning our attention back to the SFS stress tensor T_ij, the accuracy of LES hinges on the modeling of this tensor. Its divergence represents the rate at which enstrophy—a measure of rotational kinetic energy—is transferred from resolved scales to subfilter scales (diffusion) and from subfilter scales to resolved scales (backscatter). In vortex methods, the most common SFS models use variants of the Smagorinsky eddy-viscosity model formulated for the vorticity stress.[4][5] However, these models are developed on the basis of homogeneous isotropic turbulence, which makes them overly diffusive in simulations with coherent vortical structures. In Reference [1], the following anisotropic model of SFS vortex stretching is proposed:","category":"page"},{"location":"rVPM/","page":"Reformulation","title":"Reformulation","text":"beginalign*  labeleqEstr\n        mathbfE_mathrmstr left( mathbfx right)\n    approx\n        sumlimits_q\n            zeta_sigma(mathbfx-mathbfx_q)\n            left(\n                boldsymbolGamma_q cdot nabla\n            right)\n            left(\n                overlinemathbfu left( mathbfx right) - overlinemathbfu left( mathbfx_q right)\n            right)\nendalign*","category":"page"},{"location":"rVPM/","page":"Reformulation","title":"Reformulation","text":"The model coefficient C_d is calculated dynamically at the position of every particle as","category":"page"},{"location":"rVPM/","page":"Reformulation","title":"Reformulation","text":"beginalign*  labeleqCdGammaMLave\n        C_d\n    =\n        frac\n            left boldsymbolGamma_p cdot mathbfL right\n        \n            left boldsymbolGamma_p cdot mathbfm right\n        \nendalign*","category":"page"},{"location":"rVPM/","page":"Reformulation","title":"Reformulation","text":"where left cdot right denotes an integration along Lagrangian trajectories[6], and","category":"page"},{"location":"rVPM/","page":"Reformulation","title":"Reformulation","text":"beginalign*\n    \n        mathbfm =\n            fracsigma^3zeta(0) fracpartial mathbfE_mathrmstr partial sigma (mathbfx_p)\n    \n    \n        mathbfL =\n            frac3sigma\n            left( boldsymbolGamma_p cdot nabla right)\n            left(\n                mathbfu (mathbfx_p) - overlinemathbfu (mathbfx_p)\n            right)\n            +\n            left( boldsymbolGamma_p cdot nabla right)\n            fracpartial overlinemathbfu partial sigma  (mathbfx_p)\nendalign*","category":"page"},{"location":"rVPM/","page":"Reformulation","title":"Reformulation","text":"This dynamic procedure is based on a simultaneous balance of enstrophy-production and derivatives between true and modeled SFS contributions. Backscatter is controlled by clipping the model coefficient to C_d=0 whenever the condition C_d boldsymbolGamma_p cdot mathbfE_mathrmstr (mathbfx_p) geq 0 is not satisfied. This results in a low-dissipation SFS model that uses vortex stretching as the physical mechanism for turbulence, which is well suited for flows with coherent vortical structures where the predominant cascade mechanism is vortex stretching.","category":"page"},{"location":"rVPM/","page":"Reformulation","title":"Reformulation","text":"For an in-depth derivation of the SFS model, see Chapter 3 in Alvarez' Dissertation.[2]","category":"page"},{"location":"rVPM/#Immersed-Vorticity","page":"Reformulation","title":"Immersed Vorticity","text":"","category":"section"},{"location":"rVPM/","page":"Reformulation","title":"Reformulation","text":"In order to immerse the vorticity of solid boundaries into the LES-filtered Navier-Stokes equations, the filtered vorticity field overlineboldsymbolomega(mathbfx t) is decomposed into a free-vorticity field overlineboldsymbolomega_mathrmfree(mathbfx t) and a bound-vorticity field overlineboldsymbolomega_mathrmbound(mathbfx t) as","category":"page"},{"location":"rVPM/","page":"Reformulation","title":"Reformulation","text":"beginalign*\n        overlineboldsymbolomega\n    =\n        overlineboldsymbolomega_mathrmfree + overlineboldsymbolomega_mathrmbound\nendalign*","category":"page"},{"location":"rVPM/","page":"Reformulation","title":"Reformulation","text":"Both components can be discretized with vortex particles as","category":"page"},{"location":"rVPM/","page":"Reformulation","title":"Reformulation","text":"beginalign*\n        overlineboldsymbolomega (mathbfx)\n    =\n        underbrace\n            sumlimits_p boldsymbolGamma_p zeta_sigma_p left( mathbfx - mathbfx_p right)\n        _overlineboldsymbolomega_mathrmfree\n        +\n        underbrace\n            sumlimits_b boldsymbolGamma_b zeta_sigma_b left( mathbfx - mathbfx_b right)\n        _overlineboldsymbolomega_mathrmbound\nendalign*","category":"page"},{"location":"rVPM/","page":"Reformulation","title":"Reformulation","text":"where the particles discretizing the free-vorticity field evolve according to the rVPM governing equations, Eqs. (6) through (9), while the ones discretizing the bound-vorticity are embedded on the solid boundaries and their strength is calculated by actuator models derived in Alvarez' Dissertation,[2] Chapter 6. The velocity field is obtained by inverting the relation boldsymbolomega = nabla times mathbfu, resulting in","category":"page"},{"location":"rVPM/","page":"Reformulation","title":"Reformulation","text":"beginalign*\n        overline mathbfu left( mathbfx right)\n    =\n        underbrace\n            sumlimits_p g_sigma_pleft( mathbfx-mathbfx_p right)\n                mathbfKleft( mathbfx-mathbfx_p right)\n                times\n                boldsymbolGamma_p\n        _overlinemathbfu_mathrmfree\n        +\n        underbrace\n            sumlimits_b g_sigma_bleft( mathbfx-mathbfx_b right)\n                mathbfKleft( mathbfx-mathbfx_b right)\n                times\n                boldsymbolGamma_b\n        _overlinemathbfu_mathrmbound\nendalign*","category":"page"},{"location":"rVPM/","page":"Reformulation","title":"Reformulation","text":"which includes the velocity induced by both free and bound vorticity components, and where mathbfKleft( mathbfx right) equiv - frac14pi fracmathbfxVertmathbfxVert^3. Thus, the evolution of the free particles is influenced by the vorticity immersed at the solid boundaries, affecting their convection and vortex stretching through the velocity field induced by the bound particles.","category":"page"},{"location":"rVPM/","page":"Reformulation","title":"Reformulation","text":"The immersed vorticity not only affects the evolution of existing free vorticity, but it also creates new free vorticity at the boundary through viscous diffusion. In reality, vorticity is created in the boundary layer, it builds up as it travels along the surface, and it is eventually shed off the surface either by the Kutta condition at the trailing edge, flow separation, or other turbulent mechanisms. On a slender body, the vorticity can be assumed to be shed at the trailing edge.","category":"page"},{"location":"rVPM/","page":"Reformulation","title":"Reformulation","text":"In most models inside FLOWUnsteady, instead of creating vorticity through the viscous diffusion equation, the immersed vorticity is shed along a prescribed trailing edge. This approach neglects the wake created by flow separation. However, the effects of flow separation on loading (like the drop in lift and increase in pressure drag on a stalled airfoil) can still be captured whenever lookup airfoil tables are used.","category":"page"},{"location":"rVPM/","page":"Reformulation","title":"Reformulation","text":"compat: Recommended\nFor an in-depth discussion of the actuator line and surface models implemented in FLOWUnsteady, see Chapter 6 in Alvarez' Dissertation.[2]","category":"page"},{"location":"rVPM/#Other-Schemes","page":"Reformulation","title":"Other Schemes","text":"","category":"section"},{"location":"rVPM/","page":"Reformulation","title":"Reformulation","text":"In the default settings of FLOWUnsteady, vortex stretching is resolved with the transposed scheme and the divergence of the vorticity field is treated through the relaxation scheme developed by Pedrizzeti.[7] The time integration of the governing equations is done through a low-storage third-order Runge-Kutta scheme. A Gaussian kernel is used as the LES filter zeta_sigma (or VPM radial basis function). Like the classic VPM, the reformulated VPM is spatially second-order accurate in the convective term when a Gaussian basis is used. Viscous diffusion is solved through the core spreading method coupled with the radial basis function interpolation approach for spatial adaptation developed by Barba.[8] This viscous scheme has second-order spatial convergence, while showing linear convergence when coupled with spatial adaptation. The fast multipole method (FMM) is used for the computation of the regularized Biot-Savart law, approximating the velocity field and vortex stretching through spherical harmonics with computational complexity mathcalO(N), where N is the number of particles. The FMM computation of vortex stretching is performed through an efficient complex-step derivative approximation,[9] implemented in a modified version of the open-source, parallelized code ExaFMM. FLOWVPM and FLOWUnsteady are implemented in the Julia language, which is a modern, high-level, dynamic programming language for high-performance computing.","category":"page"},{"location":"rVPM/","page":"Reformulation","title":"Reformulation","text":"compat: Recommended\nFor an in-depth discussion of the numerical schemes implemented in FLOWUnsteady, see Chapter 4 in Alvarez' Dissertation.[2]","category":"page"},{"location":"rVPM/","page":"Reformulation","title":"Reformulation","text":"[1]: E. J. Alvarez & A. Ning (2022), \"Reviving the Vortex Particle Method: A Stable Formulation for Meshless Large Eddy Simulation,\" (in review). [PDF]","category":"page"},{"location":"rVPM/","page":"Reformulation","title":"Reformulation","text":"[2]: E. J. Alvarez (2022), \"Reformulated Vortex Particle Method and Meshless Large Eddy Simulation of Multirotor Aircraft,\" Doctoral Dissertation, Brigham Young University. [VIDEO] [PDF]","category":"page"},{"location":"rVPM/","page":"Reformulation","title":"Reformulation","text":"[3]: Winckelmans, G., and Leonard, A., “Contributions to Vortex Particle Methods for the Computation of Three-Dimensional Incompressible Unsteady Flows,” Journal of Computational Physics, Vol. 109, No. 2, 1993.","category":"page"},{"location":"rVPM/","page":"Reformulation","title":"Reformulation","text":"[4]: Winckelmans, G. S., “Some progress in large-eddy simulation using the 3D vortex particle method,” CTR Annual Research Briefs, , No. 2, 1995, pp. 391–415.","category":"page"},{"location":"rVPM/","page":"Reformulation","title":"Reformulation","text":"[5]: Mansfield, J. R., Knio, O. M., and Meneveau, C., “A Dynamic LES Scheme for the Vorticity Transport Equation: Formulation and a Priori Tests,” Journal of Computational Physics, Vol. 145, No. 2, 1998, pp. 693–730.","category":"page"},{"location":"rVPM/","page":"Reformulation","title":"Reformulation","text":"[6]: Meneveau, C., Lund, T. S., and Cabot, W. H., “A Lagrangian dynamic subgrid-scale model of turbulence,” Journal of Fluid Mechanics, Vol. 319, No. -1, 1996, p. 353.","category":"page"},{"location":"rVPM/","page":"Reformulation","title":"Reformulation","text":"[7]: Pedrizzetti, G., “Insight into singular vortex flows,” Fluid Dynamics Research, Vol. 10, No. 2, 1992, pp. 101–115.","category":"page"},{"location":"rVPM/","page":"Reformulation","title":"Reformulation","text":"[8]: Barba, L. A., Leonard, A., and Allen, C. B., “Advances in viscous vortex methods - Meshless spatial adaption based on radial basis function interpolation,” International Journal for Numerical Methods in Fluids, Vol. 47, No. 5, 2005, pp. 387–421. Also, Barba, L. A., “Vortex Method for computing high-Reynolds number Flows: Increased accuracy with a fully mesh-less formulation,” California Institute of Technology, Vol. 2004, 2004.","category":"page"},{"location":"rVPM/","page":"Reformulation","title":"Reformulation","text":"[9]: Alvarez, E. J., and Ning, A., “High-Fidelity Modeling of Multirotor Aerodynamic Interactions for Aircraft Design,” AIAA Journal, Vol. 58, No. 10, 2020, pp. 4385–4400.","category":"page"},{"location":"rVPM/","page":"Reformulation","title":"Reformulation","text":"[a]: Let phi be a field and zeta_sigma a filter kernel with cutoff length sigma, the filter operator is defined as overlinephi left( mathbfx right) equiv intlimits_-infty^infty phi(mathbfy)zeta_sigma(mathbfx-mathbfy) mathrmdmathbfy.","category":"page"},{"location":"#FLOWVPM.jl","page":"Introduction","title":"FLOWVPM.jl","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"FLOWVPM implements the reformulated vortex particle method (rVPM) developed in E. J. Alvarez' doctoral dissertation Reformulated Vortex Particle Method and Meshless Large Eddy Simulation of Multirotor Aircraft, 2022 [PDF][VIDEO]. The rVPM is a meshless CFD method solving the LES-filtered incompressible Navier-Stokes equations in their vorticity form. It uses a Lagrangian scheme, which not only avoids the hurdles of mesh generation, but it also conserves vortical structures over long distances with minimal numerical dissipation while being orders of magnitude faster than conventional mesh-based CFD.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"The rVPM uses particles to discretize the Navier-Stokes equations, with the particles representing radial basis functions that construct a continuous vorticity/velocity field. The basis functions become the LES filter, providing a variable filter width and spatial adaption as the particles are convected and stretched by the velocity field. The local evolution of the filter width provides an extra degree of freedom to re-inforce conservations laws, which makes the reformulated VPM numerically stable.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"This meshless CFD has several advantages over conventional mesh-based CFD. In the absence of a mesh, the rVPM (1) does not suffer from the conventional CFL condition, (2) does not suffer from the numerical dissipation introduced by a mesh, and (3) derivatives are calculated analytically rather than approximated through a stencil. Furthermore, rVPM is highly efficient since it uses computational elements only where there is vorticity rather than meshing the entire space, making it 100x faster than conventional mesh-based LES.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"FLOWVPM is implemented in Julia, which is a modern, high-level, dynamic programming language for high-performance computing. Paraview is recommended for visualization of simulations.","category":"page"},{"location":"#Features","page":"Introduction","title":"Features","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"Fast-multipole acceleration through FastMultipole.jl\nThreaded CPU parallelization through OpenMP\nMeshless\nSecond-order spatial accuracy and third-order RK time integration\nNumerically stable by reshaping particles subject to vortex stretching\nSubfilter-scale (SFS) model of turbulence associated to vortex stretching\nSFS model coefficient computed dynamically or prescribed\nViscous diffusion through core spreading","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"FLOWVPM is a stand-alone simulation framework, but it has also been integrated and used in the following codes: FLOWUnsteady, SUAVE, and   VortexLattice","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"This is an open-source project.   Improvements and further development by the community are accepted and encouraged.","category":"page"},{"location":"#Theory-and-Validation","page":"Introduction","title":"Theory and Validation","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"E. J. Alvarez, 2022, Reformulated Vortex Particle Method and Meshless Large Eddy Simulation of Multirotor Aircraft. Doctoral Dissertation, Brigham Young University. [PDF][VIDEO]\nE. J. Alvarez & A. Ning, 2022, Reviving the Vortex Particle Method: A Stable Formulation for Meshless Large Eddy Simulation. In review. [PDF]\nE. J. Alvarez, J. Mehr, & A. Ning, 2022, FLOWUnsteady: An Interactional Aerodynamics Solver for Multirotor Aircraft and Wind Energy. AIAA AVIATION 2022 Forum. [PDF]","category":"page"},{"location":"#Sponsors","page":"Introduction","title":"Sponsors","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"<img src=\"docs/img/sponsors00.jpg\" alt=\"Pic here\" style=\"width:900px\"/>","category":"page"},{"location":"#Examples","page":"Introduction","title":"Examples","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"Turbulent Jet: examples/roundjet/ [VIDEO1] [VIDEO2]   <img src=\"docs/media/img/vid-roundjet.jpg\" alt=\"Pic here\" style=\"width:600px\"/>","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"Vortex Ring Leapfrog: examples/vortexrings/   <img src=\"docs/media/img/vid-leapfrog.jpg\" alt=\"Pic here\" style=\"width:600px\"/>","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"Isolated Vortex Ring: examples/vortexrings/   <img src=\"docs/media/img/vid-vortexring.jpg\" alt=\"Pic here\" style=\"width:600px\"/>","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"Rotor in Hover: FLOWUnsteady [VIDEO]   <img src=\"docs/media/img/vid-rotor.jpg\" alt=\"Pic here\" style=\"width:600px\"/>","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"Ring with Toroidal Vorticity: [LINK] [VIDEO]   <img src=\"docs/media/img/vid-vortonring2.jpg\" alt=\"Pic here\" style=\"width:600px\"/>","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"eVTOL Aircraft: FLOWUnsteady  [VIDEO]   <img src=\"docs/media/img/vahana2.jpg\" alt=\"Pic here\" style=\"width:600px\"/>","category":"page"},{"location":"#About","page":"Introduction","title":"About","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"Main Developer    : Eduardo J Alvarez\nEmail             : Edo.AlvarezR@gmail.com\nWebsite           : edoalvarez.com\nCreated           : 2019\nLicense           : MIT","category":"page"}]
}
